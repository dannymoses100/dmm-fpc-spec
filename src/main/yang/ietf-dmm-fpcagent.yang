module ietf-dmm-fpcagent {
    namespace "urn:ietf:params:xml:ns:yang:fpcagent";
    prefix fpcagent;

    import ietf-dmm-fpcbase { prefix fpcbase; revision-date 2016-08-03; }
    import ietf-inet-types { prefix inet; revision-date 2013-07-15; }

    organization "IETF DMM Working Group";
    contact "Satoru Matsushima <satoru.matsushima@g.softbank.co.jp>";

    description
    "This module contains YANG definition for
     Forwarding Policy Configuration Protocol.(FPCP)";

    revision 2016-08-03 {
        description "Changes based on -04 version of FPC draft.";
        reference "draft-ietf-dmm-fpc-cpdp-04";
    }

    feature fpc-basic-agent {
        description "This is an agent co-located with a DPN.  In this case
        only DPN Peer Groups, the DPN Id and Control Protocols are exposed
        along with the core structures.";
    }
    feature fpc-multi-dpn {
        description "The agent supports multiple DPNs.";
    }
    feature fpc-cloning {
      description "An ability to support cloning in the RPC.";
    }
    feature fpc-basename-registry {
      description "Ability to track Base Names already provisioned on the Agent";
    }
    feature fpc-bundles {
      description "Ability for Client to send multiple bundles of actions to
        an Agent";
    }
    feature fpc-client-binding {
      description "Allows a FPC Client to bind a DPN to an Topology Object";
    }
    feature fpc-auto-binding {
      description "Allows a FPC Agent to advertise Topology Objects that could be DPNs";
    }
    feature instruction-bitset {
      description "Allows the expression of instructions (bit sets) over FPC.";
    }

    typedef agent-identifier {
        type fpcbase:fpc-identity;
    }

    typedef client-identifier {
        type fpcbase:fpc-identity;
    }

    // Top Level Structures
    list contexts {
        key context-id;
        uses fpcbase:fpc-context;
    }
    list ports {
        key port-id;
        uses fpcbase:fpc-port;
    }
    list policy-groups {
        key "policy-group-id";
        uses fpcbase:fpc-policy-group;
    }
    list policies {
        key "policy-id";
        uses fpcbase:fpc-policy;
    }
    list descriptors {
      key descriptor-id;
      uses fpcbase:fpc-descriptor;
    }
    list actions {
        key action-id;
        uses fpcbase:fpc-action;
    }

    // General Agent Structures
    leaf-list agent-features {
      type inet:uri;
    }

    // Basic Agent Structures
    list dpn-group-peers {
        if-feature fpc-basic-agent;
        key "remote-dpn-group-id";
        uses fpcbase:fpc-dpn-peer-group;
    }
    leaf dpn-id {
      if-feature fpc-basic-agent;
      type fpcbase:fpc-dpn-id;
    }
    leaf-list control-protocols {
      if-feature fpc-basic-agent;
      type identityref {
        base "fpcbase:fpc-dpn-control-protocol";
      }
    }

    // Multi-DPN Agent Structures
    grouping fpc-dpn-group {
        leaf group-id {
            type fpcbase:fpc-dpn-group-id;
        }
        leaf fowarding-role {
            type identityref {
                base "fpcbase:fpc-forwaridingplane-role";
            }
        }
        leaf access-type {
            type identityref {
                base "fpcbase:fpc-access-type";
            }
        }
        leaf mobility-profile {
            type identityref {
                base "fpcbase:fpc-mobility-profile-type";
            }
        }
        list dpn-group-peers {
            key "remote-dpn-group-id";
            uses fpcbase:fpc-dpn-peer-group;
        }
    }

    list dpn-groups {
        if-feature fpc-multi-dpn;
        key group-id;
        uses fpcagent:fpc-dpn-group;
    }
    list dpns {
        if-feature fpc-multi-dpn;
        key dpn-id;
        uses fpcbase:fpc-dpn;
    }

    // Base Name Registry Feature
    list basename-registry {
        description "A registy for multiple clients operating upon the same base,
          e.g. '/mcc:01/mnc:01' to determine if a Client has already provisioned
          common Policy on the Agent / DPN";
        if-feature fpcagent:fpc-basename-registry;
        key basename;
        leaf basename {
            type fpcbase:fpc-identity;
        }
        leaf state {
            type string;
        }
        leaf version {
            type string;
        }
    }

    // RPC
    // RPC Specific Structures
    //Input Structures
    typedef admin-status {
        type enumeration {
            enum enabled { value 0; }
            enum disabled { value 1; }
            enum virtual { value 2; }
        }
    }

    typedef session-status {
        type enumeration {
            enum complete { value 0; }
            enum incomplete { value 1; }
            enum outdated { value 2; }
        }
    }

    typedef operation-delay {
        type uint32;
    }

    typedef op-identifier {
        type uint64;
    }

    grouping instructions {
      container instructions {
        if-feature instruction-bitset;
        choice instr-type {
        }
      }
    }

    grouping op-header {
      leaf client-id {
        type fpcagent:client-identifier;
      }
      leaf delay {
        type operation-delay;
      }
      leaf session-state {
        type session-status;
      }
      leaf admin-state {
        type admin-status;
      }
      leaf op-type {
        type enumeration {
          enum create { value 0; }
          enum update { value 1; }
          enum query { value 2; }
          enum delete { value 3; }
        }
      }
      uses fpcagent:instructions;
    }

    grouping clone-ref {
      leaf entity {
        type fpcbase:fpc-identity;
      }
      leaf source {
        type fpcbase:fpc-identity;
      }
    }

    identity command-set {
      description "protocol specific commands";
    }

    // Output Structure
    grouping payload {
      list descriptors {
        uses fpcbase:fpc-descriptor;
      }
      list actions {
        uses fpcbase:fpc-action;
      }
      list policies {
        uses fpcbase:fpc-policy;
      }
      list policy-groups {
        uses fpcbase:fpc-policy-group;
      }
      list ports {
        uses fpcbase:fpc-port;
      }
      list contexts {
        uses fpcbase:fpc-context;
      }
    }

    grouping op-input {
      uses fpcagent:op-header;
      leaf id {
        type op-identifier;
      }
      list clones {
        if-feature fpc-cloning;
        key entity;
        uses fpcagent:clone-ref;
      }
      uses fpcagent:payload {
        augment policy-groups {
          uses fpcagent:instructions;
        }
        augment ports {
          uses fpcagent:instructions;
        }
        augment contexts {
          uses fpcagent:instructions;
        }
      }
    }

    typedef result {
      type enumeration {
        enum ok { value 0; }
        enum err { value 1; }
        enum ok-notify-follows { value 2; }
      }
    }

    identity error-type {
      description "Base Error Type";
    }

    grouping result-body {
      leaf id {
        type op-identifier;
      }
      choice result-type {
        case err {
          leaf error-type {
            type identityref {
              base "fpcagent:error-type";
            }
          }
          leaf error-info {
            type string;
          }
        }
        case config-success {
          uses fpcagent:payload;
        }
        case empty-case {
        }
      }
    }

    // Common RPCs
    rpc configure {
      input {
        uses fpcagent:op-input;
      }
      output {
        leaf result {
          type result;
        }
        uses fpcagent:result-body;
      }
    }

    rpc configure-bundles {
      if-feature fpcagent:fpc-bundles;
      input {
        list bundles {
          key id;
          uses fpcagent:op-input;
        }
      }
      output {
        list bundles {
          key id;
          uses fpcagent:result-body;
        }
      }
    }

    rpc bind-dpn {
      if-feature fpcagent:fpc-client-binding;
      input {
        leaf node-id {
          type inet:uri;
        }
        uses fpcbase:fpc-dpn;
      }
      output {
        uses fpcagent:result-body;
      }
    }
    rpc unbind-dpn {
      if-feature fpcagent:fpc-client-binding;
      input {
        leaf dpn-id {
          type fpcbase:fpc-dpn-id;
        }
      }
      output {
        uses fpcagent:result-body;
      }
    }

    rpc event_register {
        description "Used to registered parameters";
    }

    identity event-type {
        description "Base Event Type";
    }

    grouping op-status {
      leaf op-status {
        type enumeration {
          enum ok { value 0; }
          enum err { value 1; }
        }
      }
    }

    notification notify {
        description "A new Topology Object appears that could be uses as a DPN";
        leaf event-type {
            type identityref {
              base "fpcagent:event-type";
            }
        }
        choice value {
            case config-result {
              uses fpcagent:op-status;
              uses fpcagent:result-body;
            }
            case config-bundle-result {
              list bundles {
                uses fpcagent:op-status;
                uses fpcagent:result-body;
              }
            }
            case dpn-candidate-available {
              if-feature fpcagent:fpc-auto-binding;
              leaf node-id {
                type inet:uri;
              }
              leaf-list access-types {
                type identityref {
                  base "fpcbase:fpc-access-type";
                }
              }
              leaf-list mobility-profiles {
                type identityref {
                  base "fpcbase:fpc-mobility-profile-type";
                }
              }
              leaf-list forwarding-plane-roles {
                type identityref {
                  base "fpcbase:fpc-forwaridingplane-role";
                }
              }
            }
        }
    }
}
